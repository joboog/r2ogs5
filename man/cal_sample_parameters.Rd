% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calibration_methods.R
\name{cal_sample_parameters}
\alias{cal_sample_parameters}
\title{sample parameters with the Latin Hypercube method}
\usage{
cal_sample_parameters(
  calibration_set,
  n_samples = d * 3,
  interval_01 = FALSE,
  scale_which = NULL,
  scale_fun = I,
  unscale_fun = I
)
}
\arguments{
\item{calibration_set}{\emph{tibble} with columns \emph{file_ext}, \emph{mkey, skey, spec},
\emph{min}, and \emph{max}. Best created via \code{\link[=cal_create_calibration_set]{cal_create_calibration_set()}}.}

\item{n_samples}{\emph{integer} for the number of samples for each parameter}

\item{interval_01}{\emph{logical} should the sample be from the (0,1) interval?}

\item{scale_which}{\emph{character} that identifies the parameters in
\code{calibration_set} that should be scaled. Default is \emph{NULL}, then all parameters
will be scaled according to \emph{scale_fun}.}

\item{scale_fun}{\emph{function} that allows sampling from a scaled distribution, e.g.
if the values are on a \emph{log} scale. Default is \code{I()} i.e. no transformation.}

\item{unscale_fun}{\emph{function} inverse of the previous function to transform
parameters back after sampling. Default is \code{I()} as well.}
}
\value{

}
\description{
LHD samples are drawn from a uniform (0, 1) distribution via
\code{\link[lhs]{randomLHS}} and then transformed (if desired) to the
respective range via \code{\link[stats]{qunif}} and the minimum- and maximum
values specified in \code{calibration_set}.
}
\examples{
\dontrun{
calibration_set <- cal_create_calibration_set(
    c("mmp$MEDIUM_PROPERTIES1$PERMEABILITY_TENSOR", "ISOTROPIC", 1.0e-4, 1.0e-2),
    c("mmp$MEDIUM_PROPERTIES2$PERMEABILITY_TENSOR", "ISOTROPIC", 1.0e-9, 1.0e-4),
    c("mmp$MEDIUM_PROPERTIES3$PERMEABILITY_TENSOR", "ISOTROPIC", 1.0e-7, 1.0e-3),
    c("mmp$MEDIUM_PROPERTIES4$PERMEABILITY_TENSOR", "ISOTROPIC", 1.0e-7, 1.0e-3)
)

# sample starting parameters from calibration set
init <- cal_sample_parameters(calibration_set,
                              n_samples = 4,
                              interval_01 = FALSE,
                              scale_fun = log10,
                              unscale_fun = function(x) 10**x,
)}
}
